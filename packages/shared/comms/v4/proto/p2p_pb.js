// source: p2p.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.MessageData', null, global);
goog.exportSymbol('proto.Packet', null, global);
goog.exportSymbol('proto.Packet.DataCase', null, global);
goog.exportSymbol('proto.PacketType', null, global);
goog.exportSymbol('proto.PingData', null, global);
goog.exportSymbol('proto.PongData', null, global);
goog.exportSymbol('proto.SuspendRelayData', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MessageData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MessageData.repeatedFields_, null);
};
goog.inherits(proto.MessageData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MessageData.displayName = 'proto.MessageData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PingData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PingData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PingData.displayName = 'proto.PingData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PongData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PongData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PongData.displayName = 'proto.PongData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SuspendRelayData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SuspendRelayData.repeatedFields_, null);
};
goog.inherits(proto.SuspendRelayData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SuspendRelayData.displayName = 'proto.SuspendRelayData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Packet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Packet.repeatedFields_, proto.Packet.oneofGroups_);
};
goog.inherits(proto.Packet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Packet.displayName = 'proto.Packet';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MessageData.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MessageData.prototype.toObject = function(opt_includeInstance) {
  return proto.MessageData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MessageData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MessageData.toObject = function(includeInstance, msg) {
  var f, obj = {
    room: jspb.Message.getFieldWithDefault(msg, 1, ""),
    dstList: msg.getDstList_asB64(),
    payload: msg.getPayload_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MessageData}
 */
proto.MessageData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MessageData;
  return proto.MessageData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MessageData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MessageData}
 */
proto.MessageData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoom(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addDst(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPayload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MessageData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MessageData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MessageData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MessageData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoom();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDstList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      2,
      f
    );
  }
  f = message.getPayload_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional string room = 1;
 * @return {string}
 */
proto.MessageData.prototype.getRoom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.MessageData} returns this
 */
proto.MessageData.prototype.setRoom = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated bytes dst = 2;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.MessageData.prototype.getDstList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * repeated bytes dst = 2;
 * This is a type-conversion wrapper around `getDstList()`
 * @return {!Array<string>}
 */
proto.MessageData.prototype.getDstList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getDstList()));
};


/**
 * repeated bytes dst = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDstList()`
 * @return {!Array<!Uint8Array>}
 */
proto.MessageData.prototype.getDstList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getDstList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.MessageData} returns this
 */
proto.MessageData.prototype.setDstList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.MessageData} returns this
 */
proto.MessageData.prototype.addDst = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.MessageData} returns this
 */
proto.MessageData.prototype.clearDstList = function() {
  return this.setDstList([]);
};


/**
 * optional bytes payload = 3;
 * @return {!(string|Uint8Array)}
 */
proto.MessageData.prototype.getPayload = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes payload = 3;
 * This is a type-conversion wrapper around `getPayload()`
 * @return {string}
 */
proto.MessageData.prototype.getPayload_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPayload()));
};


/**
 * optional bytes payload = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPayload()`
 * @return {!Uint8Array}
 */
proto.MessageData.prototype.getPayload_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPayload()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.MessageData} returns this
 */
proto.MessageData.prototype.setPayload = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PingData.prototype.toObject = function(opt_includeInstance) {
  return proto.PingData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PingData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PingData.toObject = function(includeInstance, msg) {
  var f, obj = {
    pingId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PingData}
 */
proto.PingData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PingData;
  return proto.PingData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PingData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PingData}
 */
proto.PingData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPingId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PingData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PingData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PingData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PingData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPingId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 ping_id = 1;
 * @return {number}
 */
proto.PingData.prototype.getPingId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.PingData} returns this
 */
proto.PingData.prototype.setPingId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PongData.prototype.toObject = function(opt_includeInstance) {
  return proto.PongData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PongData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PongData.toObject = function(includeInstance, msg) {
  var f, obj = {
    pingId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PongData}
 */
proto.PongData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PongData;
  return proto.PongData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PongData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PongData}
 */
proto.PongData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPingId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PongData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PongData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PongData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PongData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPingId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 ping_id = 1;
 * @return {number}
 */
proto.PongData.prototype.getPingId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.PongData} returns this
 */
proto.PongData.prototype.setPingId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SuspendRelayData.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SuspendRelayData.prototype.toObject = function(opt_includeInstance) {
  return proto.SuspendRelayData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SuspendRelayData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SuspendRelayData.toObject = function(includeInstance, msg) {
  var f, obj = {
    relayedPeersList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    durationMillis: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SuspendRelayData}
 */
proto.SuspendRelayData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SuspendRelayData;
  return proto.SuspendRelayData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SuspendRelayData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SuspendRelayData}
 */
proto.SuspendRelayData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addRelayedPeers(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDurationMillis(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SuspendRelayData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SuspendRelayData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SuspendRelayData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SuspendRelayData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRelayedPeersList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getDurationMillis();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * repeated string relayed_peers = 1;
 * @return {!Array<string>}
 */
proto.SuspendRelayData.prototype.getRelayedPeersList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.SuspendRelayData} returns this
 */
proto.SuspendRelayData.prototype.setRelayedPeersList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.SuspendRelayData} returns this
 */
proto.SuspendRelayData.prototype.addRelayedPeers = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.SuspendRelayData} returns this
 */
proto.SuspendRelayData.prototype.clearRelayedPeersList = function() {
  return this.setRelayedPeersList([]);
};


/**
 * optional uint32 duration_millis = 2;
 * @return {number}
 */
proto.SuspendRelayData.prototype.getDurationMillis = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.SuspendRelayData} returns this
 */
proto.SuspendRelayData.prototype.setDurationMillis = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Packet.repeatedFields_ = [10];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.Packet.oneofGroups_ = [[11,12,13,15]];

/**
 * @enum {number}
 */
proto.Packet.DataCase = {
  DATA_NOT_SET: 0,
  MESSAGE_DATA: 11,
  PING_DATA: 12,
  PONG_DATA: 13,
  SUSPEND_RELAY_DATA: 15
};

/**
 * @return {proto.Packet.DataCase}
 */
proto.Packet.prototype.getDataCase = function() {
  return /** @type {proto.Packet.DataCase} */(jspb.Message.computeOneofCase(this, proto.Packet.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Packet.prototype.toObject = function(opt_includeInstance) {
  return proto.Packet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Packet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Packet.toObject = function(includeInstance, msg) {
  var f, obj = {
    sequenceId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    instanceId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    timestamp: jspb.Message.getFieldWithDefault(msg, 3, 0),
    src: jspb.Message.getFieldWithDefault(msg, 4, ""),
    subtype: jspb.Message.getFieldWithDefault(msg, 5, ""),
    discardOlderThan: jspb.Message.getFieldWithDefault(msg, 6, 0),
    optimistic: jspb.Message.getBooleanFieldWithDefault(msg, 14, false),
    expireTime: jspb.Message.getFieldWithDefault(msg, 7, 0),
    hops: jspb.Message.getFieldWithDefault(msg, 8, 0),
    ttl: jspb.Message.getFieldWithDefault(msg, 9, 0),
    receivedByList: (f = jspb.Message.getRepeatedField(msg, 10)) == null ? undefined : f,
    messageData: (f = msg.getMessageData()) && proto.MessageData.toObject(includeInstance, f),
    pingData: (f = msg.getPingData()) && proto.PingData.toObject(includeInstance, f),
    pongData: (f = msg.getPongData()) && proto.PongData.toObject(includeInstance, f),
    suspendRelayData: (f = msg.getSuspendRelayData()) && proto.SuspendRelayData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Packet}
 */
proto.Packet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Packet;
  return proto.Packet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Packet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Packet}
 */
proto.Packet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSequenceId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setInstanceId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSrc(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubtype(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDiscardOlderThan(value);
      break;
    case 14:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOptimistic(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setExpireTime(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHops(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTtl(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.addReceivedBy(value);
      break;
    case 11:
      var value = new proto.MessageData;
      reader.readMessage(value,proto.MessageData.deserializeBinaryFromReader);
      msg.setMessageData(value);
      break;
    case 12:
      var value = new proto.PingData;
      reader.readMessage(value,proto.PingData.deserializeBinaryFromReader);
      msg.setPingData(value);
      break;
    case 13:
      var value = new proto.PongData;
      reader.readMessage(value,proto.PongData.deserializeBinaryFromReader);
      msg.setPongData(value);
      break;
    case 15:
      var value = new proto.SuspendRelayData;
      reader.readMessage(value,proto.SuspendRelayData.deserializeBinaryFromReader);
      msg.setSuspendRelayData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Packet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Packet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Packet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Packet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSequenceId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getInstanceId();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getSrc();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getSubtype();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getDiscardOlderThan();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getOptimistic();
  if (f) {
    writer.writeBool(
      14,
      f
    );
  }
  f = message.getExpireTime();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getHops();
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = message.getTtl();
  if (f !== 0) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = message.getReceivedByList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      10,
      f
    );
  }
  f = message.getMessageData();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.MessageData.serializeBinaryToWriter
    );
  }
  f = message.getPingData();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.PingData.serializeBinaryToWriter
    );
  }
  f = message.getPongData();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.PongData.serializeBinaryToWriter
    );
  }
  f = message.getSuspendRelayData();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.SuspendRelayData.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 sequence_id = 1;
 * @return {number}
 */
proto.Packet.prototype.getSequenceId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Packet} returns this
 */
proto.Packet.prototype.setSequenceId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 instance_id = 2;
 * @return {number}
 */
proto.Packet.prototype.getInstanceId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.Packet} returns this
 */
proto.Packet.prototype.setInstanceId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 timestamp = 3;
 * @return {number}
 */
proto.Packet.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.Packet} returns this
 */
proto.Packet.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string src = 4;
 * @return {string}
 */
proto.Packet.prototype.getSrc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.Packet} returns this
 */
proto.Packet.prototype.setSrc = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string subtype = 5;
 * @return {string}
 */
proto.Packet.prototype.getSubtype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.Packet} returns this
 */
proto.Packet.prototype.setSubtype = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional int32 discard_older_than = 6;
 * @return {number}
 */
proto.Packet.prototype.getDiscardOlderThan = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.Packet} returns this
 */
proto.Packet.prototype.setDiscardOlderThan = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional bool optimistic = 14;
 * @return {boolean}
 */
proto.Packet.prototype.getOptimistic = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 14, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Packet} returns this
 */
proto.Packet.prototype.setOptimistic = function(value) {
  return jspb.Message.setProto3BooleanField(this, 14, value);
};


/**
 * optional int32 expire_time = 7;
 * @return {number}
 */
proto.Packet.prototype.getExpireTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.Packet} returns this
 */
proto.Packet.prototype.setExpireTime = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint32 hops = 8;
 * @return {number}
 */
proto.Packet.prototype.getHops = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.Packet} returns this
 */
proto.Packet.prototype.setHops = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional uint32 ttl = 9;
 * @return {number}
 */
proto.Packet.prototype.getTtl = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.Packet} returns this
 */
proto.Packet.prototype.setTtl = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * repeated string received_by = 10;
 * @return {!Array<string>}
 */
proto.Packet.prototype.getReceivedByList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 10));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.Packet} returns this
 */
proto.Packet.prototype.setReceivedByList = function(value) {
  return jspb.Message.setField(this, 10, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.Packet} returns this
 */
proto.Packet.prototype.addReceivedBy = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 10, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Packet} returns this
 */
proto.Packet.prototype.clearReceivedByList = function() {
  return this.setReceivedByList([]);
};


/**
 * optional MessageData message_data = 11;
 * @return {?proto.MessageData}
 */
proto.Packet.prototype.getMessageData = function() {
  return /** @type{?proto.MessageData} */ (
    jspb.Message.getWrapperField(this, proto.MessageData, 11));
};


/**
 * @param {?proto.MessageData|undefined} value
 * @return {!proto.Packet} returns this
*/
proto.Packet.prototype.setMessageData = function(value) {
  return jspb.Message.setOneofWrapperField(this, 11, proto.Packet.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Packet} returns this
 */
proto.Packet.prototype.clearMessageData = function() {
  return this.setMessageData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Packet.prototype.hasMessageData = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional PingData ping_data = 12;
 * @return {?proto.PingData}
 */
proto.Packet.prototype.getPingData = function() {
  return /** @type{?proto.PingData} */ (
    jspb.Message.getWrapperField(this, proto.PingData, 12));
};


/**
 * @param {?proto.PingData|undefined} value
 * @return {!proto.Packet} returns this
*/
proto.Packet.prototype.setPingData = function(value) {
  return jspb.Message.setOneofWrapperField(this, 12, proto.Packet.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Packet} returns this
 */
proto.Packet.prototype.clearPingData = function() {
  return this.setPingData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Packet.prototype.hasPingData = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional PongData pong_data = 13;
 * @return {?proto.PongData}
 */
proto.Packet.prototype.getPongData = function() {
  return /** @type{?proto.PongData} */ (
    jspb.Message.getWrapperField(this, proto.PongData, 13));
};


/**
 * @param {?proto.PongData|undefined} value
 * @return {!proto.Packet} returns this
*/
proto.Packet.prototype.setPongData = function(value) {
  return jspb.Message.setOneofWrapperField(this, 13, proto.Packet.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Packet} returns this
 */
proto.Packet.prototype.clearPongData = function() {
  return this.setPongData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Packet.prototype.hasPongData = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional SuspendRelayData suspend_relay_data = 15;
 * @return {?proto.SuspendRelayData}
 */
proto.Packet.prototype.getSuspendRelayData = function() {
  return /** @type{?proto.SuspendRelayData} */ (
    jspb.Message.getWrapperField(this, proto.SuspendRelayData, 15));
};


/**
 * @param {?proto.SuspendRelayData|undefined} value
 * @return {!proto.Packet} returns this
*/
proto.Packet.prototype.setSuspendRelayData = function(value) {
  return jspb.Message.setOneofWrapperField(this, 15, proto.Packet.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Packet} returns this
 */
proto.Packet.prototype.clearSuspendRelayData = function() {
  return this.setSuspendRelayData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Packet.prototype.hasSuspendRelayData = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * @enum {number}
 */
proto.PacketType = {
  UKNOWN_PACKET_TYPE: 0,
  MESSAGE: 1,
  PING: 2,
  PONG: 3,
  SUSPEND_RELAY: 4
};

goog.object.extend(exports, proto);
